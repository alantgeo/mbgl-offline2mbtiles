#!/bin/sh

# Convert a mbgl-offline .db file into a .mbtiles file

if [ -z "$1" -o -z "$2" -o "$1" = "-h" -o "$1" = "--help" ]; then
    echo "Usage: $0 input.db output.mbtiles"
fi

cp $1 $2
sqlite3 $2 'ALTER TABLE tiles RENAME TO dbtiles;'
MINZOOM=`sqlite3 $2 'SELECT definition FROM regions;' | jq '.min_zoom'`
MAXZOOM=`sqlite3 $2 'SELECT definition FROM regions;' | jq '.max_zoom'`
sqlite3 $2 "SELECT load_extension('./libsqlitefunctions.so'); CREATE TABLE tiles AS SELECT z AS zoom_level, x AS tile_column, CAST((power(2, z) - y - 1) AS INTEGER) AS tile_row, data AS tile_data FROM dbtiles;"
sqlite3 $2 'DROP TABLE region_resources;'
tileset_compressed_file=`mktemp`
sqlite3 $2 "SELECT writefile('$tileset_compressed_file', data) FROM resources WHERE kind = 2 LIMIT 1;"
vector_layers_file=`mktemp`
zlib-flate -uncompress < $tileset_compressed_file | jq --compact-output '{ "vector_layers": .vector_layers }' | tr -d "'" > $vector_layers_file
rm -rf $tileset_compressed_file
sqlite3 $2 'DROP TABLE resources;'
sqlite3 $2 'DROP TABLE region_tiles;'
sqlite3 $2 'DROP TABLE regions;'
sqlite3 $2 'DROP TABLE dbtiles;'
sqlite3 $2 'CREATE TABLE metadata ( name TEXT, value TEXT );'
sqlite3 $2 "INSERT INTO metadata VALUES ( 'name', '');"
sqlite3 $2 "INSERT INTO metadata VALUES ( 'description', '');"
sqlite3 $2 "INSERT INTO metadata VALUES ( 'version', '2');"
sqlite3 $2 "INSERT INTO metadata VALUES ( 'minzoom', '$MINZOOM');"
sqlite3 $2 "INSERT INTO metadata VALUES ( 'maxzoom', '$MAXZOOM');"
sqlite3 $2 "INSERT INTO metadata VALUES ( 'center', '0,0,0');"
sqlite3 $2 "INSERT INTO metadata VALUES ( 'bounds', '-180,-90,180,90');"
sqlite3 $2 "INSERT INTO metadata VALUES ( 'type', 'overlay');"
sqlite3 $2 "INSERT INTO metadata VALUES ( 'attribution', '');"
sqlite3 $2 "INSERT INTO metadata VALUES ( 'format', 'pbf');"
sqlite3 $2 "INSERT INTO metadata VALUES ( 'generator', 'mbgl-offline2mbtiles');"
vector_layers=`cat $vector_layers_file`
sqlite3 $2 "INSERT INTO metadata VALUES ( 'json', '$vector_layers');"
rm -rf $vector_layers_file
